:- use_module(library(clpfd)).

sudoku(Rows) :-
        length(Rows, 9),
        maplist(same_length(Rows), Rows),
        append(Rows, Vs), Vs ins 1..9,
        maplist(all_distinct, Rows),
        transpose(Rows, Columns),
        maplist(all_distinct, Columns),
        Rows = [As,Bs,Cs,Ds,Es,Fs,Gs,Hs,Is],
        blocks(As, Bs, Cs),
        blocks(Ds, Es, Fs),
        blocks(Gs, Hs, Is).

blocks([], [], []).
blocks([N1,N2,N3|Ns1], [N4,N5,N6|Ns2], [N7,N8,N9|Ns3]) :-
        all_distinct([N1,N2,N3,N4,N5,N6,N7,N8,N9]),
        blocks(Ns1, Ns2, Ns3).


s(Is,R):- I is Is + 1, (I = 1, R = 0, !); (I = 2, R = 2, !) ; R=1.

mp([], []).
mp([A|As], [R|Rs]):- R is A + A, mp(As,Rs).

/* Rows = [[1,_,_,_,_,_,_,_,_],
        [_,_,2,7,4,_,_,_,_],
        [_,_,_,5,_,_,_,_,4],
        [_,3,_,_,_,_,_,_,_],
        [7,5,_,_,_,_,_,_,_],
        [_,_,_,_,_,9,6,_,_],
        [_,4,_,_,_,6,_,_,_],
        [_,_,_,_,_,_,_,7,1],
        [_,_,_,_,_,1,_,3,_]],
        sudoku(Rows).
        
Rows = [[8, 6, 3, 9, 2, 5, 7, 4, 1],
[4, 1, 2, 7, 8, 6, 3, 5, 9],
[7, 5, 9, 4, 1, 3, 2, 8, 6],
[9, 7, 1, 2, 6, 4, 8, 3, 5],
[3, 4, 6, 8, 5, 7, 9, 1, 2],
[2, 8, 5, 3, 9, 1, 4, 6, 7],
[1, 9, 8, 6, 3, 2, 5, 7, 4],
[5, 2, 4, 1, 7, 8, 6, 9, 3],
[6, 3, 7, 5, 4, 9, 1, 2, 8]],
sudoku(Rows).


Rows = [[8, 6, 3, 9, 2, 5, 7, 4, 1],
[4, 1, 2, 7, _, 6, 3, 5, 9],
[7, 5, _, 4, 1, 3, 2, 8, 6],
[9, _, 1, 2, 6, 4, _, 3, 5],
[3, 4, _, 8, 5, 7, 9, 1, 2],
[2, 8, 5, 3, _, 1, 4, _, 7],
[1, 9, 8, 6, _, 2, 5, 7, 4],
[5, 2, 4, 1, _, 8, 6, 9, 3],
[6, 3, 7, 5, 4, 9, 1, _, 8]],
sudoku(Rows).



R = [[1,_,_,8,_,4,_,_,_],
             [_,2,_,_,_,_,4,5,6],
             [_,_,3,2,_,5,_,_,_],
             [_,_,_,4,_,_,8,_,5],
             [7,8,9,_,5,_,_,_,_],
             [_,_,_,_,_,6,2,_,3],
             [8,_,1,_,_,_,7,_,_],
             [_,_,_,1,2,3,_,8,_],
             [2,_,5,_,_,_,_,_,9]], sudoku(R).




        */
        